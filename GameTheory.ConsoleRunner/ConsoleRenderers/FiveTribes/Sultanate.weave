@model ImmutableList<Square>
{{
    var columns = Enumerable.Range(0, Sultanate.Size.Width);
    var rows = Enumerable.Range(0, Sultanate.Size.Height);

    var allSquares = model.Select(square =>
    {
        var sw = new StringWriter();
        this.RenderSquare(square, sw);
        return Regex.Split(sw.ToString().TrimEnd(), @"\r\n?|\n");
    }).ToList();
    string text(int column, int row, int index)
    {
        var lines = allSquares[Sultanate.Size.IndexOf(column, row)];
        return lines.Length > index ? lines[index] : null;
    }

    var cw = columns.Select(c => rows.Max(r => allSquares[Sultanate.Size.IndexOf(c, r)].Max(l => l.Length))).ToList();
    var rh = rows.Select(r => columns.Max(c => allSquares[Sultanate.Size.IndexOf(c, r)].Length)).ToList();
    string pad(int column, char padding, string value = null)
    {
        return (value ?? "").PadRight(cw[column], padding);
    }
}}
┌{{each c in columns}}{{= pad(c, '─')}}{{delimit}}┬{{/each}}┐
{{each r in rows}}
  {{each i in Enumerable.Range(0, rh[r])}}
    │{{each c in columns}}{{= pad(c, ' ', text(c, r, i))}}{{delimit}}│{{/each}}│
  {{/each}}
{{delimit}}
  ├{{each c in columns}}{{= pad(c, '─')}}{{delimit}}┼{{/each}}┤
{{/each}}
└{{each c in columns}}{{= pad(c, '─')}}{{delimit}}┴{{/each}}┘
