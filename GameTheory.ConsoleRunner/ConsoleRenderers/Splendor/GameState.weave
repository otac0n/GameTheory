@using System.Linq
@using GameTheory.Games.Splendor
@namespace GameTheory.ConsoleRunner.ConsoleRenderers.Splendor
@static false
@model GameState
{{if model.Nobles.Count > 0}}
  {{= Resources.Nobles }}:
    {{each noble in model.Nobles}}
      {{= noble}}
    {{/each}}

{{/if}}
{{each tr in Enumerable.Range(1, model.DevelopmentTracks.Length).Reverse()}}
  {{ var track = model.DevelopmentTracks[tr - 1]; }}
  Track {{= tr }}: [{{= Resources.Remaining }}: {{= model.DevelopmentDecks[tr - 1].Count }}]
    {{each card in track}}
      {{if card == null}}
        [{{= Resources.Empty }}]
      {{else}}
        {{= card }} [{{= Resources.Cost }}: {{= card.Cost }}]
      {{/if}}
    {{/each}}
{{/each}}

{{= Resources.AvailableTokens }}:
  {{= model.Tokens }}

{{if this.playerToken != null}}
  {{ var inventory = model.Inventory[playerToken]; }}
  {{= playerToken }}:
    {{= Resources.Prestige }}: {{= model.GetScore(playerToken) }}
    {{if inventory.Nobles.Count > 0}}
       {{= Resources.Nobles }}: {{= inventory.Nobles.Count }} [bonus: {{= inventory.Nobles.Count * Noble.PrestigeBonus }}]
    {{/if}}
    {{if inventory.Tokens.Count > 0}}
      {{= Resources.Tokens }}: {{= inventory.Tokens }}
    {{/if}}
    {{if inventory.Hand.Count > 0}}
      {{= Resources.Hand }}:
        {{each card in inventory.Hand}}
          {{= card }} [{{= Resources.Cost }}: {{= card.Cost}}]
        {{/each}}
    {{/if}}
    {{if inventory.DevelopmentCards.Count > 0}}
      {{= Resources.DevelopmentCards }}:
        {{each card in inventory.DevelopmentCards.OrderBy(c => c.Bonus).ThenByDescending(c => c.Prestige)}}
          {{= card }}
        {{/each}}
    {{/if}}

{{/if}}
