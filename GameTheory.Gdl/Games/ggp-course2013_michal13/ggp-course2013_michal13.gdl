;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; General Game Playing: Assignment 1

;Michal Trutman
;Claudio Tesei
;Davide Angelici

; players
(role white)
(role black)

; control
(init (control white))

(<= (next (control ?p))
	(role ?p)
	(true (control ?p2))
	(distinct ?p ?p2)
)

(init (count black 12))
(init (count white 12))

; 
; init state
; 
(init (cell 1 1 white))
(init (cell 2 1 blank))
(init (cell 3 1 white))
(init (cell 4 1 blank))
(init (cell 5 1 white))
(init (cell 6 1 blank))
(init (cell 7 1 white))
(init (cell 8 1 blank))

(init (cell 1 2 blank))
(init (cell 2 2 white))
(init (cell 3 2 blank))
(init (cell 4 2 white))
(init (cell 5 2 blank))
(init (cell 6 2 white))
(init (cell 7 2 blank))
(init (cell 8 2 white))

(init (cell 1 3 white))
(init (cell 2 3 blank))
(init (cell 3 3 white))
(init (cell 4 3 blank))
(init (cell 5 3 white))
(init (cell 6 3 blank))
(init (cell 7 3 white))
(init (cell 8 3 blank))

(init (cell 1 4 blank))
(init (cell 2 4 blank))
(init (cell 3 4 blank))
(init (cell 4 4 blank))
(init (cell 5 4 blank))
(init (cell 6 4 blank))
(init (cell 7 4 blank))
(init (cell 8 4 blank))

(init (cell 1 5 blank))
(init (cell 2 5 blank))
(init (cell 3 5 blank))
(init (cell 4 5 blank))
(init (cell 5 5 blank))
(init (cell 6 5 blank))
(init (cell 7 5 blank))
(init (cell 8 5 blank))

(init (cell 1 6 blank))
(init (cell 2 6 black))
(init (cell 3 6 blank))
(init (cell 4 6 black))
(init (cell 5 6 blank))
(init (cell 6 6 black))
(init (cell 7 6 blank))
(init (cell 8 6 black))

(init (cell 1 7 black))
(init (cell 2 7 blank))
(init (cell 3 7 black))
(init (cell 4 7 blank))
(init (cell 5 7 black))
(init (cell 6 7 blank))
(init (cell 7 7 black))
(init (cell 8 7 blank))

(init (cell 1 8 blank))
(init (cell 2 8 black))
(init (cell 3 8 blank))
(init (cell 4 8 black))
(init (cell 5 8 blank))
(init (cell 6 8 black))
(init (cell 7 8 blank))
(init (cell 8 8 black))

; 
; legal moves
; 
; no move
(<= (legal ?p nop)
	(not (true (control ?p)))
	(role ?p)
)

; single move
(<= (legal ?p (move ?xfrom ?yfrom ?xto ?yto))
	(true (control ?p))
	(true (cell ?xfrom ?yfrom ?p))
	(true (cell ?xto ?yto blank))
	(nextcoord ?xfrom ?xto)
	(domove ?p ?yfrom ?yto)
)
	
; double move
(<= (legal ?p (move2 ?xfrom ?yfrom ?xto ?yto ?xover ?yover ?p2))
	(true (control ?p))
	(true (cell ?xfrom ?yfrom ?p))
	(true (cell ?xto ?yto blank))
	(true (cell ?xover ?yover ?p2))
	(distinct ?p ?p2)
	(role ?p2)
	(nextcoord2 ?xfrom ?xto)
	(nextcoord ?xfrom ?xover)
	(nextcoord ?xover ?xto)
	(domove2 ?p ?yfrom ?yto ?yover)
)

(<= (domove white ?yfrom ?yto)
	(succ ?yfrom ?yto)
)
(<= (domove black ?yfrom ?yto)
	(succ ?yto ?yfrom)
)

(<= (domove2 white ?yfrom ?yto ?yover)
	(succ ?yfrom ?yover)
	(succ ?yover ?yto)
)
(<= (domove2 black ?yfrom ?yto ?yover)
	(succ ?yto ?yover)
	(succ ?yover ?yfrom)
)

; succesor
(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)

(<= (smaller ?x ?y)
	(succ ?x ?y)
)
(<= (smaller ?x ?y)
	(succ ?y1 ?y)
	(smaller ?x ?y1)
)

; next coordinate (single step)
(<= (nextcoord ?x1 ?x2)
	(succ ?x1 ?x2)
)
(<= (nextcoord ?x1 ?x2)
	(succ ?x2 ?x1)
)

; next next coordinate (when jumping)
(<= (nextcoord2 ?x1 ?x2)
	(succ ?x1 ?x)
	(succ ?x ?x2)
)
(<= (nextcoord2 ?x1 ?x2)
	(succ ?x2 ?x)
	(succ ?x ?x1)
)

;
; next state update
;
;save count of pieces
(<= (next (count ?anyplayer ?n))
	(does ?p (move ?xfrom ?yfrom ?xto ?yto))
	(true (count ?anyplayer ?n))
	(role ?anyplayer)
)
(<= (next (count ?p2 ?n))
	(does ?p (move2 ?xfrom ?yfrom ?xto ?yto ?xover ?yover ?p2))
	(succ ?n ?n2)
	(true (count ?p2 ?n2))
)
(<= (next (count ?p ?n))
	(does ?p (move2 ?xfrom ?yfrom ?xto ?yto ?xover ?yover ?p2))
	(true (count ?p ?n))
)

;save cell states
(<= (next (cell ?xfrom ?yfrom blank))
	(moved_from ?xfrom ?yfrom)
)
(<= (next (cell ?xover ?yover blank))
	(moved_over ?xover ?yover)
)
(<= (next (cell ?xto ?yto ?p))
	(does ?p (move ?xfrom ?yfrom ?xto ?yto))
)
(<= (next (cell ?xto ?yto ?p))
	(does ?p (move2 ?xfrom ?yfrom ?xto ?yto ?xover ?yover ?p2))
)
(<= (next (cell ?x ?y ?c))
	(true (cell ?x ?y ?c))
	(not (moved_from ?x ?y))
	(not (moved_to ?x ?y))
	(not (moved_over ?x ?y))
)

;helper rules to define state of remaining cells
(<= (moved_to ?xto ?yto)
	(does ?p (move ?xfrom ?yfrom ?xto ?yto))
)
(<= (moved_to ?xto ?yto)
	(does ?p (move2 ?xfrom ?yfrom ?xto ?yto ?xover ?yover ?p2))
)

(<= (moved_from ?xfrom ?yfrom)
	(does ?p (move ?xfrom ?yfrom ?xto ?yto))
)
(<= (moved_from ?xfrom ?yfrom)
	(does ?p (move2 ?xfrom ?yfrom ?xto ?yto ?xover ?yover ?p2))
)

(<= (moved_over ?xover ?yover)
	(does ?p (move2 ?xfrom ?yfrom ?xto ?yto ?xover ?yover ?p2))
)


;;;;;;;;;;; Game end
(<= terminal (wins ?p))

(<= terminal (nomove ?p))
    
(<= terminal
    (true (count ?p 0)))

(<= (wins black)
    (true (cell ?x 1 black))
)

(<= (wins white)
    (true (cell ?x 8 white))
)

(<= (nomove ?p)
    (true (control ?p))
    (role ?p)
    (not (legalmove ?p))
)

(<= (legalmove ?player)
    (or
	(legal ?player (move ?xfrom ?yfrom ?xto ?yto))
	(legal ?player (move2 ?xfrom ?yfrom ?xto ?yto ?xover ?yover ?p2))
    )
)

;;;;;;;;;;;;;; Goal
(<= (goal ?p 100)
    (wins ?p)
)

(<= (goal ?p 0)
    (wins ?p2)
    (role ?p)
    (distinct ?p ?p2)
)

(<= (goal ?p1 100)
    (not (wins white))
    (not (wins black))
    (true (count ?p1 ?n1))
    (true (count ?p2 ?n2))
    (smaller ?n2 ?n1)
    (role ?p1)
    (role ?p2)
    (distinct ?p1 ?p2)
)

(<= (goal ?p2 0)
    (not (wins white))
    (not (wins black))
    (true (count ?p1 ?n1))
    (true (count ?p2 ?n2))
    (smaller ?n2 ?n1)
    (role ?p1)
    (role ?p2)
    (distinct ?p1 ?p2)
)

(<= (goal ?p2 50)
    (not (wins white))
    (not (wins black))
    (role ?x)
    (true (count ?p1 ?n))
    (true (count ?p2 ?n))
    (role ?p1)
    (role ?p2)
    (distinct ?p1 ?p2)
)



