; Breakthrough-Checkers

; Roles and turn control

(role white)
(role black)

(init (control white))

(<= (next (control black))
    (true (control white)))

(<= (next (control white))
    (true (control black)))

; Board setup

(init (cell 1 1 white))
(init (cell 1 2 blank))
(init (cell 1 3 white))
(init (cell 1 4 blank))
(init (cell 1 5 white))
(init (cell 1 6 blank))
(init (cell 1 7 white))
(init (cell 1 8 blank))

(init (cell 2 1 blank))
(init (cell 2 2 white))
(init (cell 2 3 blank))
(init (cell 2 4 white))
(init (cell 2 5 blank))
(init (cell 2 6 white))
(init (cell 2 7 blank))
(init (cell 2 8 white))

(init (cell 3 1 white))
(init (cell 3 2 blank))
(init (cell 3 3 white))
(init (cell 3 4 blank))
(init (cell 3 5 white))
(init (cell 3 6 blank))
(init (cell 3 7 white))
(init (cell 3 8 blank))

(init (cell 4 1 blank))
(init (cell 4 2 blank))
(init (cell 4 3 blank))
(init (cell 4 4 blank))
(init (cell 4 5 blank))
(init (cell 4 6 blank))
(init (cell 4 7 blank))
(init (cell 4 8 blank))

(init (cell 5 1 blank))
(init (cell 5 2 blank))
(init (cell 5 3 blank))
(init (cell 5 4 blank))
(init (cell 5 5 blank))
(init (cell 5 6 blank))
(init (cell 5 7 blank))
(init (cell 5 8 blank))

(init (cell 6 1 blank))
(init (cell 6 2 black))
(init (cell 6 3 blank))
(init (cell 6 4 black))
(init (cell 6 5 blank))
(init (cell 6 6 black))
(init (cell 6 7 blank))
(init (cell 6 8 black))

(init (cell 7 1 black))
(init (cell 7 2 blank))
(init (cell 7 3 black))
(init (cell 7 4 blank))
(init (cell 7 5 black))
(init (cell 7 6 blank))
(init (cell 7 7 black))
(init (cell 7 8 blank))

(init (cell 8 1 blank))
(init (cell 8 2 black))
(init (cell 8 3 blank))
(init (cell 8 4 black))
(init (cell 8 5 blank))
(init (cell 8 6 black))
(init (cell 8 7 blank))
(init (cell 8 8 black))

; Preconditions for moves

(<= (legal white noop)
    (true (control black)))

(<= (legal black noop)
    (true (control white)))

(<= (legal white (move ?x1 ?y1 ?x2 ?y2))
    (true (control white))
    (true (cell ?x1 ?y1 white))
    (succ ?x2 ?x1)
    (true (cell ?x2 ?y2 blank))
    (succ ?y2 ?y1))

(<= (legal white (move ?x1 ?y1 ?x2 ?y2))
    (true (control white))
    (true (cell ?x1 ?y1 white))
    (succ ?x2 ?x1)
    (true (cell ?x2 ?y2 blank))
    (succ ?y1 ?y2))

(<= (legal black (move ?x1 ?y1 ?x2 ?y2))
    (true (control black))
    (true (cell ?x1 ?y1 black))
    (succ ?x1 ?x2)
    (true (cell ?x2 ?y2 blank))
    (succ ?y2 ?y1))

(<= (legal black (move ?x1 ?y1 ?x2 ?y2))
    (true (control black))
    (true (cell ?x1 ?y1 black))
    (succ ?x1 ?x2)
    (true (cell ?x2 ?y2 blank))
    (succ ?y1 ?y2))

(<= (legal white (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
    (true (control white))
    (true (cell ?x1 ?y1 white))
    (succ ?x2 ?x1)
    (succ ?x3 ?x2)
    (true (cell ?x2 ?y2 black))
    (true (cell ?x3 ?y3 blank))
    (succ ?y2 ?y1)
    (succ ?y3 ?y2))

(<= (legal white (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
    (true (control white))
    (true (cell ?x1 ?y1 white))
    (succ ?x2 ?x1)
    (succ ?x3 ?x2)
    (true (cell ?x2 ?y2 black))
    (true (cell ?x3 ?y3 blank))
    (succ ?y1 ?y2)
    (succ ?y2 ?y3))

(<= (legal black (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
    (true (control black))
    (true (cell ?x1 ?y1 black))
    (succ ?x1 ?x2)
    (succ ?x2 ?x3)
    (true (cell ?x2 ?y2 white))
    (true (cell ?x3 ?y3 blank))
    (succ ?y2 ?y1)
    (succ ?y3 ?y2))

(<= (legal black (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
    (true (control black))
    (true (cell ?x1 ?y1 black))
    (succ ?x1 ?x2)
    (succ ?x2 ?x3)
    (true (cell ?x2 ?y2 white))
    (true (cell ?x3 ?y3 blank))
    (succ ?y1 ?y2)
    (succ ?y2 ?y3))

; Effects of moves

(<= (next (cell ?x1 ?y1 blank))
    (does ?p (move ?x1 ?y1 ?x2 ?y2)))

(<= (next (cell ?x1 ?y1 blank))
    (does ?p (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)))

(<= (next (cell ?x2 ?y2 ?p))
    (does ?p (move ?x1 ?y1 ?x2 ?y2)))

(<= (next (cell ?x3 ?y3 ?p))
    (does ?p (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)))

(<= (next (cell ?x2 ?y2 blank))
    (does ?p (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)))

(<= (different ?x1 ?y1 ?x2 ?y2)
    (true (cell ?x1 ?y1 ?val1))
    (true (cell ?x2 ?y2 ?val2))
    (distinct ?x1 ?x2))

(<= (different ?x1 ?y1 ?x2 ?y2)
    (true (cell ?x1 ?y1 ?val1))
    (true (cell ?x2 ?y2 ?val2))
    (distinct ?y1 ?y2))

(<= (next (cell ?x ?y ?val))
    (true (cell ?x ?y ?val))
    (does ?p (move ?x1 ?y1 ?x2 ?y2))
    (different ?x ?y ?x1 ?y1)
	(different ?x ?y ?x2 ?y2))

(<= (next (cell ?x ?y ?val))
    (true (cell ?x ?y ?val))
    (does ?p (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
    (different ?x ?y ?x1 ?y1)
	(different ?x ?y ?x2 ?y2)
	(different ?x ?y ?x3 ?y3))

; Conditions for game ending

(<= (victory white)
    (true (cell 8 ?y white)))

(<= (victory black)
    (true (cell 1 ?y black)))

(<= terminal
    (victory ?p))

(<= (canmove ?p)
    (legal ?p (move ?x1 ?y1 ?x2 ?y2)))

(<= (cancapture ?p)
    (legal ?p (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)))

(<= terminal
    (true (control ?p))
    (not (canmove ?p))
    (not (cancapture ?p)))

; Successor relation

(succ 1 0)
(succ 2 1)
(succ 3 2)
(succ 4 3)
(succ 5 4)
(succ 6 5)
(succ 7 6)
(succ 8 7)
(succ 9 8)
(succ 10 9)
(succ 11 10)
(succ 12 11)

; Order

(<= (smaller ?a ?b)
    (succ ?b ?a))

(<= (smaller ?a ?b)
    (succ ?c ?a)
    (smaller ?c ?b))

; Number of pieces on the board

(init (wcount 12))
(init (bcount 12))

(<= (next (wcount ?b))
    (true (wcount ?a))
    (succ ?a ?b)
    (does black (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)))

(<= (next (bcount ?b))
    (true (bcount ?a))
    (succ ?a ?b)
    (does white (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)))

(<= (next (bcount ?a))
    (true (bcount ?a))
    (does ?p (move ?x1 ?y1 ?x2 ?y2)))

(<= (next (wcount ?a))
    (true (wcount ?a))
    (does ?p (move ?x1 ?y1 ?x2 ?y2)))

(<= (next (bcount ?a))
    (true (bcount ?a))
    (does black (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)))

(<= (next (wcount ?a))
    (true (wcount ?a))
    (does white (capture ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)))

; Winning conditions

(<= (goal ?p 100)
    (victory ?p))

(<= (goal ?p 0)
    (role ?p)
    (victory ?p2)
    (distinct ?p ?p2))

(<= (goal white 100)
    (not (victory white))
    (not (victory black))
    (true (wcount ?a))
    (true (bcount ?b))
    (smaller ?b ?a))

(<= (goal black 0)
    (not (victory white))
    (not (victory black))
    (true (wcount ?a))
    (true (bcount ?b))
    (smaller ?b ?a))

(<= (goal black 100)
    (not (victory white))
    (not (victory black))
    (true (wcount ?a))
    (true (bcount ?b))
    (smaller ?a ?b))

(<= (goal white 0)
    (not (victory white))
    (not (victory black))
    (true (wcount ?a))
    (true (bcount ?b))
    (smaller ?a ?b))

(<= (goal ?p 50)
    (role ?p)
    (not (victory white))
    (not (victory black))
    (true (wcount ?a))
    (true (bcount ?a)))
