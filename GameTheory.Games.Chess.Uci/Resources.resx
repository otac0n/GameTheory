<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Hash" xml:space="preserve">
    <value>Hash Table Size (MB)</value>
  </data>
  <data name="HashDescription" xml:space="preserve">
    <value>The size (in MB) of the engine's hash tables.</value>
  </data>
  <data name="MultiPV" xml:space="preserve">
    <value>Multiple Principle Variations</value>
  </data>
  <data name="MultiPVDescription" xml:space="preserve">
    <value>The number of best lines.</value>
  </data>
  <data name="NalimovCache" xml:space="preserve">
    <value>Nalimov Cache Size (MB)</value>
  </data>
  <data name="NalimovCacheDescription" xml:space="preserve">
    <value>The size (in MB) of the engine's endgame tablebase cache.</value>
  </data>
  <data name="NalimovPath" xml:space="preserve">
    <value>Nalimov Path</value>
  </data>
  <data name="NalimovPathDescription" xml:space="preserve">
    <value>The path to a directory containing endgame tablebases in the Nalimov format. Multiple directories must be separated with a semicolon (";").</value>
  </data>
  <data name="OwnBook" xml:space="preserve">
    <value>Use Book</value>
  </data>
  <data name="OwnBookDescription" xml:space="preserve">
    <value>The engine may access its opening book.</value>
  </data>
  <data name="Ponder" xml:space="preserve">
    <value>Ponder</value>
  </data>
  <data name="PonderDescription" xml:space="preserve">
    <value>Whether the engine is allowed to ponder.</value>
  </data>
  <data name="Syzygy50MoveRule" xml:space="preserve">
    <value>Syzygy 50-move Rule</value>
  </data>
  <data name="Syzygy50MoveRuleDescription" xml:space="preserve">
    <value>Whether to include the 50-move rule in the evaluation of endgame tablebase positions.</value>
  </data>
  <data name="SyzygyPath" xml:space="preserve">
    <value>Syzygy Path</value>
  </data>
  <data name="SyzygyPathDescription" xml:space="preserve">
    <value>The path to a directory containing endgame tablebases in the Syzygy format.</value>
  </data>
  <data name="SyzygyProbeDepth" xml:space="preserve">
    <value>Syzygy Probe Depth</value>
  </data>
  <data name="SyzygyProbeDepthDescription" xml:space="preserve">
    <value>The minimum search depth that must be reached before the endgame tablebase will be probed. The starting position of each move will always be probed.</value>
  </data>
  <data name="SyzygyProbeLimit" xml:space="preserve">
    <value>Syzygy Probe Limit</value>
  </data>
  <data name="SyzygyProbeLimitDescription" xml:space="preserve">
    <value>The maximum number of pieces remaining before probing the endgame tablebase.</value>
  </data>
  <data name="UCI_About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="UCI_AnalyseMode" xml:space="preserve">
    <value>Analyze Mode</value>
  </data>
  <data name="UCI_AnalyseModeDescription" xml:space="preserve">
    <value>Whether the engine is in "analyze mode".</value>
  </data>
  <data name="UCI_Chess960" xml:space="preserve">
    <value>Chess960 Castling</value>
  </data>
  <data name="UCI_Chess960Description" xml:space="preserve">
    <value>Whether castling moves will be represented as the capture of a rook, to support Chess960.</value>
  </data>
  <data name="UCI_Elo" xml:space="preserve">
    <value>ELO</value>
  </data>
  <data name="UCI_EloDescription" xml:space="preserve">
    <value>The strength to which the engine should limit itself.</value>
  </data>
  <data name="UCI_LimitStrength" xml:space="preserve">
    <value>Limit Strength</value>
  </data>
  <data name="UCI_LimitStrengthDescription" xml:space="preserve">
    <value>Whether the engine should limit its playing strength.</value>
  </data>
  <data name="UCI_Opponent" xml:space="preserve">
    <value>Opponent</value>
  </data>
  <data name="UCI_OpponentDescription" xml:space="preserve">
    <value>The title, ELO, and name of the opponent.</value>
  </data>
  <data name="UCI_ShowCurrLine" xml:space="preserve">
    <value>Show Current Line</value>
  </data>
  <data name="UCI_ShowCurrLineDescription" xml:space="preserve">
    <value>Whether the engine should show the line it is calculating.</value>
  </data>
  <data name="UCI_ShowRefutations" xml:space="preserve">
    <value>Show Refutations</value>
  </data>
  <data name="UCI_ShowRefutationsDescription" xml:space="preserve">
    <value>Whether the engine should a move and its refutation in a line.</value>
  </data>
</root>