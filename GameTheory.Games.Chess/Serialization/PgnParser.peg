@classname PgnParser
@namespace GameTheory.Games.Chess.Serialization
@using System.Linq
@using System.Collections.Immutable
@using GameTheory.GameTree
@using GameTheory.Games.Chess.NotationSystems
@members
{
    private bool nestedComments;
    private NotationSystem notation;

    public PgnParser(NotationSystem? notationSystem = null, bool nestedComments = false)
    {
        this.notation = notationSystem ?? new AlgebraicNotation();
        this.nestedComments = nestedComments;
    }

    private static bool IsPrintable(char c)
    {
        if (char.IsControl(c))
        {
            return false;
        }

        switch (c)
        {
            case '\t':
            case '\n':
            case '\r':
            case '\u2028': // Line separator
            case '\u2029': // Paragraph separator
                return false;
        }

        return true;
    }

    private static bool IsLetter(char c)
    {
        return char.IsLetter(c) || char.IsBetween(c, (char)0x2654, (char)0x265F);
    }

    private static void InitializeGameState(IEnumerable<KeyValuePair<string, string>> tags, Cursor cursor)
    {
        GameState gameState;

        var lookup = tags.ToLookup(t => t.Key, t => t.Value);
        if (lookup.Contains("SetUp") && lookup["SetUp"].Single() == "1")
        {
            gameState = new GameState(lookup["FEN"].Single());
        }
        else
        {
            gameState = new GameState();
        }

        cursor[nameof(GameState)] = gameState;
        cursor["Lookup"] = ImmutableDictionary<double, GameState>.Empty;
    }

    private GameState GetGameState(Cursor cursor) => (GameState)cursor[nameof(GameState)];
    private ImmutableDictionary<double, GameState> GetStateLookup(Cursor cursor) => (ImmutableDictionary<double, GameState>)cursor["Lookup"];

    private double GetHalfMoveNumber(Cursor cursor) => GetHalfMoveNumber(GetGameState(cursor));
    private double GetHalfMoveNumber(GameState gameState) => gameState.MoveNumber + (gameState.ActiveColor == Pieces.Black ? 0.5 : 0);

    private void MakeMove(Cursor cursor, Move move)
    {
        var lookup = GetStateLookup(cursor);
        var gameState = GetGameState(cursor);

        cursor["Lookup"] = lookup.SetItem(GetHalfMoveNumber(gameState), gameState);
        cursor[nameof(GameState)] = gameState.MakeMove(move);
    }

    private Move FindMove(Cursor cursor, string move)
    {
        return (from m in GetGameState(cursor).GetAvailableMoves()
                from s in m.IsCheckmate ? new[] { "#", "+", "" } : m.IsCheck ? new[] { "+", "" } : new [] { "" }
                where this.notation.FormatString(m) + s == move
                select m).SingleOrDefault();
    }

    private Mainline<GameState, Move, Result> MakeResult(Cursor cursor, double white, double black)
    {
        var gameState = GetGameState(cursor);

        Result Score(double a, double b) => a switch
        {
            1 when b > 0.5 => Result.SharedWin,
            1 => Result.Win,
            0.5 => Result.Impasse,
            0 when b > 0 => Result.Loss,
            0 => Result.None,
        };

        var scores = new Dictionary<PlayerToken, Result>()
        {
            { gameState.Players[0], Score(white, black) },
            { gameState.Players[1], Score(black, white) },
        };

        return new(scores, gameState, gameState.ActivePlayer, ImmutableStack<IReadOnlyList<IWeighted<Move>>>.Empty, 0, true);
    }
}

database <IList<PgnGame>>
    = (escape / _) games:game<0,,_> _ EOF { games }

game <PgnGame>
    = tags:tagSection #{ InitializeGameState(tags, state); } orig:(<GameState> { GetGameState(state) }) _ elements:moveSection { new PgnGame(tags, orig, elements.Where(e => !(e is double))) }

tagSection <IEnumerable<KeyValuePair<string, string>>>
    = tagPair<0,,_>

tagPair <KeyValuePair<string, string>>
    = "[" _ name:identifier _ value:string _ "]" { new KeyValuePair<string, string>(name, value) }

moveSection <IList<object>> = e:elements _ t:result { e.Concat(new[] { t }).ToList().AsReadOnly() }

elements = element<0,,_>

recursiveVariation <object> =
    "(" _
    origState:(<GameState> { GetGameState(state) })
    origLookup:(<ImmutableDictionary<double, GameState>> { GetStateLookup(state) })
    (
        n:&moveNumberLookahead
        expected:(<double> { GetHalfMoveNumber(state) })
        &{ n < expected }
        (&{ origLookup.ContainsKey(n) } / #ERROR{ "Wrong move number '" + n + "'. (" + GetGameState(state) + ")" })
        #{
            state[nameof(GameState)] = origLookup[n];
            state["Lookup"] = origLookup.Remove(n);
        }
    )
    v:elements
    x:(<object> _ t:result { t })?
    _ (")" / #ERROR{ "Expected ')'." })
    #{
        state[nameof(GameState)] = origState;
        state["Lookup"] = origLookup;
    }
    { v.Concat(x).ToList().AsReadOnly() }

element <object>
    = recursiveVariation
    / !result n:moveNumber { n }
    / move
    / comment

moveNumberLookahead <double> =
    n:integer p:(_ ".")* { n + (p.Count > 1 ? 0.5 : 0) }

moveNumber <double> =
    n:moveNumberLookahead
    expected:(<double> { GetHalfMoveNumber(state) })
    (&{ n == expected } / #ERROR{ "Wrong move number '" + n + "'. (" + GetGameState(state) + ")" })
    { n }

move <Move> =
    move:identifier
    found:(<Move> { this.FindMove(state, move) })
    (&{ found != null } / #ERROR{ "Could not find move '" + move + "'. (" + GetGameState(state) + ": " + string.Join(" ", GetGameState(state).GetAvailableMoves().Select(this.notation.FormatString)) + ")" })
    #{ MakeMove(state, found); }
    { found }

comment <object>
    = g:glyph { (NumericAnnotationGlyph)g }
    / n:numericalGlyph { (NumericAnnotationGlyph) n }
    / braceComment

glyph <int>
    = ("!!" / "‼") { 3 }
    / ("??" / "⁇") { 4 }
    / "!" { 1 }
    / "?" { 2 }
    / "⁉" { 5 }
    / "⁈" { 6 }
    / "□" { 7 }
    / "=" { 10 }
    / "∞" { 13 }
    / "⩲" { 14 }
    / "⩱" { 15 }
    / "±" { 16 }
    / "∓" { 17 }
    / "+" _ "−" { 18 }
    / "+" _ "−" { 19 }

numericalGlyph <int> = "$" i:integer { i }

braceComment <object>
    = "{" t:('' [^{}]*) "}" { t }
    / !{ nestedComments } "{" t:('' [^}]*) ("}" / #ERROR{ "Expected '}'." }) { t }
    / &{ nestedComments } "{" n:(<object> t:('' [^{}]+) { t } / braceComment)* ("}" / #ERROR{ "Expected '}'." }) { n }

result <object> -memoize
  = "*" { MakeResult(state, 0, 0) }
  / white:integer _ "-" _ black:integer { MakeResult(state, white, black) }
  / a:integer _ "/" _ b:integer _ "-" _ c:integer _ "/" _ d:integer &{ a == 1 && b == 2 && c == 1 && d == 2 } { MakeResult(state, 0.5, 0.5) }

string = "\"" unescaped:(c:[^\"] &{ IsPrintable(c[0]) } / "\\" { "\\" } / "\\\"" { "\"" })+ "\"" { string.Concat(unescaped) }

integer <int> = i:([0-9] [0-9]*) { int.Parse(i) }

identifier = c:. &{ IsLetter(c[0]) } ([-+#=:_0-9] / r:. &{ IsLetter(r[0]) })*

_ -memoize = '' (WS / EOL escape / EOL)*

escape = '%' data:('' (!EOL .)*)

EOL -memoize
    = [\n\r\u2028\u2029]

WS -memoize
    = [ \t\v\f\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]

EOF = c:. #ERROR{ "Unexpected character '" + c + "'" } / ;
